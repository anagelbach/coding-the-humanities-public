// Generated by IcedCoffeeScript 1.3.3g
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var YamljsPlugin;
  return YamljsPlugin = (function(_super) {

    __extends(YamljsPlugin, _super);

    function YamljsPlugin() {
      return YamljsPlugin.__super__.constructor.apply(this, arguments);
    }

    YamljsPlugin.prototype.name = 'yamljs';

    YamljsPlugin.prototype.config = {
      indent: false
    };

    YamljsPlugin.prototype.render = function(opts, next) {
      var YAML, config, inExtension, obj, outExtension;
      config = this.config;
      inExtension = opts.inExtension, outExtension = opts.outExtension;
      if ((inExtension === 'yml' || inExtension === 'yaml') && (outExtension === 'json' || outExtension === null)) {
        YAML = require('yamljs');
        obj = null;
        try {
          obj = YAML.parse(opts.content);
        } catch (err) {
          return next(err);
        }
        if (config.indent === false) {
          opts.content = JSON.stringify(obj);
        } else if (config.indent === true) {
          opts.content = JSON.stringify(obj, null, 4);
        } else {
          opts.content = JSON.stringify(obj, null, config.indent);
        }
        return next();
      } else if (inExtension === 'json' && (outExtension === 'yml' || outExtension === 'yaml')) {
        YAML = require('yamljs');
        obj = null;
        try {
          obj = JSON.parse(opts.content);
        } catch (err) {
          return next(err);
        }
        opts.content = YAML.stringify(obj, 8);
        return next();
      } else {
        return next();
      }
    };

    return YamljsPlugin;

  })(BasePlugin);
};
